run_gdb 는 gdb multiarch에서 입력하는 명령어들을 자동화한 파일
monitor system reset 사용하면 처음으로 돌아옴
main도 함수에 지나지않음
startup에서 bl main에서 이름 바꾸면 실제 실행할 main도 바꾸면됨 똑같이

숙제 시 startup.s는 분석 x 다음에 하면됨
linkscript 도 메모리 스택 정도만 생각하고 나머지는 나중에 하셈

data 영역 stack영역

포인터의 원리

int a = 7;
*(&a) = 7
a의 주소값

int* ap = &a

stm 헤더파일 open
원하는 키워드 드래그 후 쉬프트 클릭하면 헤당 함수로 이동
tREG_RCC 는 구조체로 선언됨 
내부레지스터를 STRUCT로 묶어주면
즉, 구조체로하면 하나씩 주소 선언 안해도되서 노가다 할 필요없음

숙제

스펙문서 PDF열어보면 주소영역을 잘 생각해보면

main.c 열어보면 분석해보기

mcu가 보드의 peripheral과 어떻게 연결되어있는지 ?

userguide
led보면 user부분만 사용할수있음 위에거는 이미 지정된거라 설정불가

ld1 는 보드의 pd12보트와 연결 등


data sheet와 userguide를 보며 확인
데이터시트의 8.4 유심히보며 공부

gdb 실행시키고 while  무한 루프에 들어가서 대기중일때 보드의 버튼을 누르면
버튼을 누르면 idr 레지스터에 1이쓰여지고 그다음 c언어 구문을 
차례차례 비트에 쓰여지게 되고 

xor을 통하여 하나의 비트가 1로 고정되면 1버터 역할을 수행해서 
어셈블러 상에서 두번참조하는 이유
일단 컴파일러가 관할하고 알수는없지만 추측상

